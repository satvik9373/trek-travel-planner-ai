import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Mic, MicOff, Send, Bot, User, Globe, Volume2, VolumeX, Loader2, Sparkles } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from 'sonner';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  language?: string;
  suggestions?: string[];
  tripData?: any;
}

interface AIChatInterfaceProps {
  onTripGenerated?: (tripData: any) => void;
  initialPrompt?: string;
}

const AIChatInterface: React.FC<AIChatInterfaceProps> = ({ 
  onTripGenerated, 
  initialPrompt 
}) => {
  const { user, userProfile } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<any>(null);
  const synthesisRef = useRef<SpeechSynthesis | null>(null);

  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' }
  ];

  useEffect(() => {
    // Initialize speech recognition
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = selectedLanguage === 'hi' ? 'hi-IN' : selectedLanguage === 'en' ? 'en-US' : selectedLanguage;

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setCurrentMessage(transcript);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };

      recognitionRef.current.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
        toast.error('Voice recognition failed. Please try again.');
      };
    }

    // Initialize speech synthesis
    if ('speechSynthesis' in window) {
      synthesisRef.current = window.speechSynthesis;
    }

    // Add welcome message
    if (messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: getWelcomeMessage(),
        sender: 'ai',
        timestamp: new Date(),
        language: selectedLanguage,
        suggestions: [
          'Plan a 5-day trip to Goa',
          'Show me heritage destinations in India',
          'Adventure activities in Himachal Pradesh',
          'Budget travel options in Kerala'
        ]
      };
      setMessages([welcomeMessage]);
    }
  }, [selectedLanguage]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (initialPrompt) {
      handleSendMessage(initialPrompt);
    }
  }, [initialPrompt]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const getWelcomeMessage = () => {
    const messages = {
      en: "Hello! I'm your AI travel assistant. I can help you plan amazing trips, find destinations, and create personalized itineraries. What kind of adventure are you looking for?",
      hi: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§®‡•á, ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡§®‡•á ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•Ä ‡§§‡§≤‡§æ‡§∂ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç?",
      es: "¬°Hola! Soy tu asistente de viajes con IA. Puedo ayudarte a planificar viajes incre√≠bles, encontrar destinos y crear itinerarios personalizados. ¬øQu√© tipo de aventura est√°s buscando?",
      fr: "Bonjour! Je suis votre assistant de voyage IA. Je peux vous aider √† planifier des voyages incroyables, trouver des destinations et cr√©er des itin√©raires personnalis√©s. Quel type d'aventure recherchez-vous?",
      de: "Hallo! Ich bin Ihr KI-Reiseassistent. Ich kann Ihnen dabei helfen, erstaunliche Reisen zu planen, Reiseziele zu finden und personalisierte Reiserouten zu erstellen. Nach welcher Art von Abenteuer suchen Sie?",
      ja: "„Åì„Çì„Å´„Å°„ÅØÔºÅÁßÅ„ÅØ„ÅÇ„Å™„Åü„ÅÆAIÊóÖË°å„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇÁ¥†Êô¥„Çâ„Åó„ÅÑÊóÖË°å„ÅÆË®àÁîª„ÄÅÁõÆÁöÑÂú∞„ÅÆÁô∫Ë¶ã„ÄÅ„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åï„Çå„ÅüÊóÖÁ®ã„ÅÆ‰ΩúÊàê„Çí„ÅäÊâã‰ºù„ÅÑ„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂÜíÈô∫„Çí„ÅäÊé¢„Åó„Åß„Åô„ÅãÔºü",
      ko: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî ÎãπÏã†Ïùò AI Ïó¨Ìñâ ÎèÑÏö∞ÎØ∏ÏûÖÎãàÎã§. Î©ãÏßÑ Ïó¨Ìñâ Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∞Í≥†, Î™©Ï†ÅÏßÄÎ•º Ï∞æÍ≥†, Í∞úÏù∏ÌôîÎêú Ïó¨Ìñâ ÏùºÏ†ïÏùÑ ÎßåÎìúÎäî Îç∞ ÎèÑÏõÄÏùÑ ÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§. Ïñ¥Îñ§ Ï¢ÖÎ•òÏùò Î™®ÌóòÏùÑ Ï∞æÍ≥† Í≥ÑÏã†Í∞ÄÏöî?"
    };
    return messages[selectedLanguage as keyof typeof messages] || messages.en;
  };

  const handleSendMessage = async (message?: string) => {
    const messageToSend = message || currentMessage.trim();
    if (!messageToSend) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: messageToSend,
      sender: 'user',
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsTyping(true);

    try {
      // Call AI service to get response
      const aiResponse = await getAIResponse(messageToSend, selectedLanguage);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse.content,
        sender: 'ai',
        timestamp: new Date(),
        language: selectedLanguage,
        suggestions: aiResponse.suggestions,
        tripData: aiResponse.tripData
      };

      setMessages(prev => [...prev, aiMessage]);

      // Speak the response if voice is enabled
      if (voiceEnabled && aiResponse.content) {
        speakMessage(aiResponse.content);
      }

      // If trip data is generated, callback to parent
      if (aiResponse.tripData && onTripGenerated) {
        onTripGenerated(aiResponse.tripData);
      }

    } catch (error) {
      console.error('AI response error:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: 'Sorry, I encountered an error. Please try again.',
        sender: 'ai',
        timestamp: new Date(),
        language: selectedLanguage
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const getAIResponse = async (message: string, language: string) => {
    // This would integrate with your backend AI service
    // For now, returning mock responses based on message content
    
    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate AI processing

    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('plan') || lowerMessage.includes('trip') || lowerMessage.includes('travel')) {
      return {
        content: getLocalizedResponse('trip_planning', language),
        suggestions: [
          'Tell me your budget range',
          'How many days do you want to travel?',
          'What are your interests?',
          'Which destinations interest you?'
        ],
        tripData: null
      };
    }
    
    if (lowerMessage.includes('budget') || lowerMessage.includes('price') || lowerMessage.includes('cost')) {
      return {
        content: getLocalizedResponse('budget_planning', language),
        suggestions: [
          'Budget travel options',
          'Mid-range recommendations',
          'Luxury experiences',
          'Compare prices'
        ]
      };
    }
    
    if (lowerMessage.includes('destination') || lowerMessage.includes('place') || lowerMessage.includes('where')) {
      return {
        content: getLocalizedResponse('destination_suggestions', language),
        suggestions: [
          'Beach destinations',
          'Mountain retreats',
          'Cultural heritage sites',
          'Adventure locations'
        ]
      };
    }

    // Default response
    return {
      content: getLocalizedResponse('general_help', language),
      suggestions: [
        'Plan a new trip',
        'Find destinations',
        'Budget advice',
        'Travel tips'
      ]
    };
  };

  const getLocalizedResponse = (type: string, language: string) => {
    const responses = {
      trip_planning: {
        en: "I'd love to help you plan your trip! Let me gather some information. Where would you like to go, when are you planning to travel, and what's your approximate budget?",
        hi: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•Ç‡§Ç‡§ó‡§æ! ‡§Æ‡•Å‡§ù‡•á ‡§ï‡•Å‡§õ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‡§Ü‡§™ ‡§ï‡§π‡§æ‡§Å ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§ï‡§¨ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§¨‡§ú‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        es: "¬°Me encantar√≠a ayudarte a planificar tu viaje! Necesito informaci√≥n. ¬øA d√≥nde te gustar√≠a ir, cu√°ndo planeas viajar y cu√°l es tu presupuesto aproximado?"
      },
      budget_planning: {
        en: "Let's work on your budget! India offers incredible experiences at every price point. What's your approximate budget per person, and are you looking for budget, mid-range, or luxury experiences?",
        hi: "‡§Ü‡§á‡§è ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ú‡§ü ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç! ‡§≠‡§æ‡§∞‡§§ ‡§π‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§¨‡§ø‡§Ç‡§¶‡•Å ‡§™‡§∞ ‡§Ö‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§¨‡§ú‡§ü ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        es: "¬°Trabajemos en tu presupuesto! India ofrece experiencias incre√≠bles en todos los rangos de precios. ¬øCu√°l es tu presupuesto aproximado por persona?"
      },
      destination_suggestions: {
        en: "India has amazing destinations for every type of traveler! Are you interested in beaches, mountains, cultural heritage, wildlife, or spiritual experiences? I can suggest the perfect places based on your interests.",
        hi: "‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§π‡§∞ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø ‡§π‡•à‡§Ç! ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∏‡§Æ‡•Å‡§¶‡•ç‡§∞ ‡§§‡§ü‡•ã‡§Ç, ‡§™‡§π‡§æ‡§°‡§º‡•ã‡§Ç, ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§µ‡§ø‡§∞‡§æ‡§∏‡§§, ‡§µ‡§®‡•ç‡§Ø‡§ú‡•Ä‡§µ‡§®, ‡§Ø‡§æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∞‡•Å‡§ö‡§ø ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç?",
        es: "¬°India tiene destinos incre√≠bles para todo tipo de viajero! ¬øTe interesan las playas, monta√±as, patrimonio cultural, vida silvestre o experiencias espirituales?"
      },
      general_help: {
        en: "I'm here to help with all your travel needs! I can assist with trip planning, destination recommendations, budget advice, and creating detailed itineraries. What would you like to explore?",
        hi: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§≠‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å! ‡§Æ‡•à‡§Ç ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ, ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ, ‡§¨‡§ú‡§ü ‡§∏‡§≤‡§æ‡§π ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§",
        es: "¬°Estoy aqu√≠ para ayudar con todas tus necesidades de viaje! Puedo ayudarte con planificaci√≥n de viajes, recomendaciones de destinos, consejos de presupuesto y creaci√≥n de itinerarios detallados."
      }
    };

    return responses[type as keyof typeof responses]?.[language as keyof typeof responses[keyof typeof responses]] 
           || responses[type as keyof typeof responses]?.en 
           || "I'm here to help you plan amazing trips!";
  };

  const startListening = () => {
    if (recognitionRef.current) {
      setIsListening(true);
      recognitionRef.current.start();
    } else {
      toast.error('Voice recognition is not supported in your browser');
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  const speakMessage = (text: string) => {
    if (synthesisRef.current && voiceEnabled) {
      // Stop any current speech
      synthesisRef.current.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = selectedLanguage === 'hi' ? 'hi-IN' : selectedLanguage === 'en' ? 'en-US' : selectedLanguage;
      utterance.rate = 0.9;
      utterance.pitch = 1;
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      synthesisRef.current.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if (synthesisRef.current) {
      synthesisRef.current.cancel();
      setIsSpeaking(false);
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setCurrentMessage(suggestion);
  };

  return (
    <div className="flex flex-col h-[600px] max-w-4xl mx-auto bg-white rounded-lg shadow-lg">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg">
        <div className="flex items-center space-x-2">
          <Sparkles className="h-6 w-6" />
          <h2 className="text-xl font-bold">AI Travel Assistant</h2>
        </div>
        
        <div className="flex items-center space-x-2">
          {/* Language Selector */}
          <select
            value={selectedLanguage}
            onChange={(e) => setSelectedLanguage(e.target.value)}
            className="bg-white/20 text-white border border-white/30 rounded px-2 py-1 text-sm"
          >
            {languages.map(lang => (
              <option key={lang.code} value={lang.code} className="text-black">
                {lang.flag} {lang.name}
              </option>
            ))}
          </select>
          
          {/* Voice Controls */}
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setVoiceEnabled(!voiceEnabled)}
            className="text-white hover:bg-white/20"
          >
            {voiceEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
          </Button>
          
          {isSpeaking && (
            <Button
              variant="ghost"
              size="sm"
              onClick={stopSpeaking}
              className="text-white hover:bg-white/20"
            >
              Stop
            </Button>
          )}
        </div>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`flex max-w-[80%] ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start space-x-2`}>
                <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                  message.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-purple-100 text-purple-600'
                }`}>
                  {message.sender === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                </div>
                
                <Card className={`${message.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-50'}`}>
                  <CardContent className="p-3">
                    <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                    <div className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString()}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-2">
                <div className="flex-shrink-0 w-8 h-8 rounded-full bg-purple-100 text-purple-600 flex items-center justify-center">
                  <Bot className="h-4 w-4" />
                </div>
                <Card className="bg-gray-50">
                  <CardContent className="p-3">
                    <div className="flex items-center space-x-1">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      <span className="text-sm">AI is thinking...</span>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
          
          {/* Suggestions */}
          {messages.length > 0 && messages[messages.length - 1]?.suggestions && !isTyping && (
            <div className="flex flex-wrap gap-2 mt-4">
              {messages[messages.length - 1].suggestions?.map((suggestion, index) => (
                <Badge
                  key={index}
                  variant="secondary"
                  className="cursor-pointer hover:bg-blue-100"
                  onClick={() => handleSuggestionClick(suggestion)}
                >
                  {suggestion}
                </Badge>
              ))}
            </div>
          )}
        </div>
        <div ref={messagesEndRef} />
      </ScrollArea>

      {/* Input */}
      <div className="p-4 border-t bg-gray-50">
        <div className="flex items-center space-x-2">
          <div className="flex-1 relative">
            <Input
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              placeholder={`Type your message in ${languages.find(l => l.code === selectedLanguage)?.name || 'English'}...`}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              className="pr-10"
            />
            {isListening && (
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                <div className="animate-pulse text-red-500">
                  <Mic className="h-4 w-4" />
                </div>
              </div>
            )}
          </div>
          
          <Button
            variant={isListening ? "destructive" : "outline"}
            size="icon"
            onClick={isListening ? stopListening : startListening}
            disabled={isTyping}
          >
            {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
          </Button>
          
          <Button onClick={() => handleSendMessage()} disabled={!currentMessage.trim() || isTyping}>
            <Send className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="text-xs text-gray-500 mt-2 text-center">
          {isListening ? 'Listening... Speak now!' : 'Click the mic to use voice input'}
        </div>
      </div>
    </div>
  );
};

export default AIChatInterface;